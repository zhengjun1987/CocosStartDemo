{"version":3,"sources":["assets/scripts/Player.js"],"names":["cc","Class","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","type","AudioClip","displayName","setJumpAction","jumpUp","moveBy","v2","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","audioEngine","playEffect","onKeyDown","event","keyCode","macro","KEY","a","accLeft","d","accRight","onKeyUp","onLoad","jumpAction","node","runAction","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","KEY_UP","onDestroy","off","start","update","dt","Math","abs","x","gameOver","log","stopAction"],"mappings":";;;;;;AAAAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACRC,IAAAA,UAAU,EAAE,CADJ;AAERC,IAAAA,YAAY,EAAE,CAFN;AAGRC,IAAAA,YAAY,EAAE,CAHN;AAIRC,IAAAA,KAAK,EAAE,CAJC;AAKRC,IAAAA,SAAS,EAAE;AACP,iBAAS,IADF;AAEPC,MAAAA,IAAI,EAAET,EAAE,CAACU,SAFF;AAGPC,MAAAA,WAAW,EAAC;AAHL;AALH,GAHP;AAeLC,EAAAA,aAAa,EAAE,yBAAY;AACvB;AACA,QAAIC,MAAM,GAAGb,EAAE,CAACc,MAAH,CAAU,KAAKT,YAAf,EAA6BL,EAAE,CAACe,EAAH,CAAM,CAAN,EAAS,KAAKX,UAAd,CAA7B,EAAwDY,MAAxD,CAA+DhB,EAAE,CAACiB,kBAAH,EAA/D,CAAb,CAFuB,CAGvB;;AACA,QAAIC,QAAQ,GAAGlB,EAAE,CAACc,MAAH,CAAU,KAAKT,YAAf,EAA6BL,EAAE,CAACe,EAAH,CAAM,CAAN,EAAS,CAAC,KAAKX,UAAf,CAA7B,EAAyDY,MAAzD,CAAgEhB,EAAE,CAACmB,iBAAH,EAAhE,CAAf;AAEA,QAAIC,QAAQ,GAAGpB,EAAE,CAACqB,QAAH,CAAY,KAAKC,aAAjB,EAA+B,IAA/B,CAAf,CANuB,CAOvB;;AACA,WAAOtB,EAAE,CAACuB,aAAH,CAAiBvB,EAAE,CAACwB,QAAH,CAAYX,MAAZ,EAAoBK,QAApB,EAA6BE,QAA7B,CAAjB,CAAP;AACH,GAxBI;AA0BLE,EAAAA,aA1BK,2BA0BU;AACXtB,IAAAA,EAAE,CAACyB,WAAH,CAAeC,UAAf,CAA0B,KAAKlB,SAA/B,EAAyC,KAAzC;AACH,GA5BI;AA8BLmB,EAAAA,SA9BK,qBA8BKC,KA9BL,EA8BY;AACb;AACA,YAAQA,KAAK,CAACC,OAAd;AACI,WAAK7B,EAAE,CAAC8B,KAAH,CAASC,GAAT,CAAaC,CAAlB;AACI,aAAKC,OAAL,GAAe,IAAf;AACA;;AACJ,WAAKjC,EAAE,CAAC8B,KAAH,CAASC,GAAT,CAAaG,CAAlB;AACI,aAAKC,QAAL,GAAgB,IAAhB;AACA;AANR;AAQH,GAxCI;AA0CLC,EAAAA,OA1CK,mBA0CGR,KA1CH,EA0CU;AACX;AACA,YAAQA,KAAK,CAACC,OAAd;AACI,WAAK7B,EAAE,CAAC8B,KAAH,CAASC,GAAT,CAAaC,CAAlB;AACI,aAAKC,OAAL,GAAe,KAAf;AACA;;AACJ,WAAKjC,EAAE,CAAC8B,KAAH,CAASC,GAAT,CAAaG,CAAlB;AACI,aAAKC,QAAL,GAAgB,KAAhB;AACA;AANR;AAQH,GApDI;AAsDL;AAEAE,EAAAA,MAxDK,oBAwDI;AACL;AACA,SAAKC,UAAL,GAAkB,KAAK1B,aAAL,EAAlB;AACA,SAAK2B,IAAL,CAAUC,SAAV,CAAoB,KAAKF,UAAzB,EAHK,CAKL;;AACA,SAAKL,OAAL,GAAe,KAAf;AACA,SAAKE,QAAL,GAAgB,KAAhB,CAPK,CAQL;;AACA,SAAKM,MAAL,GAAc,CAAd,CATK,CAWL;;AACAzC,IAAAA,EAAE,CAAC0C,WAAH,CAAeC,EAAf,CAAkB3C,EAAE,CAAC4C,WAAH,CAAeC,SAAf,CAAyBC,QAA3C,EAAqD,KAAKnB,SAA1D,EAAqE,IAArE;AACA3B,IAAAA,EAAE,CAAC0C,WAAH,CAAeC,EAAf,CAAkB3C,EAAE,CAAC4C,WAAH,CAAeC,SAAf,CAAyBE,MAA3C,EAAmD,KAAKX,OAAxD,EAAiE,IAAjE;AACH,GAtEI;AAwELY,EAAAA,SAxEK,uBAwEO;AACR;AACAhD,IAAAA,EAAE,CAAC0C,WAAH,CAAeO,GAAf,CAAmBjD,EAAE,CAAC4C,WAAH,CAAeC,SAAf,CAAyBC,QAA5C,EAAsD,KAAKnB,SAA3D,EAAsE,IAAtE;AACA3B,IAAAA,EAAE,CAAC0C,WAAH,CAAeO,GAAf,CAAmBjD,EAAE,CAAC4C,WAAH,CAAeC,SAAf,CAAyBE,MAA5C,EAAoD,KAAKX,OAAzD,EAAkE,IAAlE;AACH,GA5EI;AA8ELc,EAAAA,KA9EK,mBA8EG,CAEP,CAhFI;AAiFLC,EAAAA,MAAM,EAAE,gBAAUC,EAAV,EAAc;AAClB;AACA,QAAI,KAAKnB,OAAT,EAAkB;AACd,WAAKQ,MAAL,IAAe,KAAKlC,KAAL,GAAa6C,EAA5B;AACH,KAFD,MAEO,IAAI,KAAKjB,QAAT,EAAmB;AACtB,WAAKM,MAAL,IAAe,KAAKlC,KAAL,GAAa6C,EAA5B;AACH,KANiB,CAOlB;;;AACA,QAAIC,IAAI,CAACC,GAAL,CAAS,KAAKb,MAAd,IAAwB,KAAKnC,YAAjC,EAA+C;AAC3C;AACA,WAAKmC,MAAL,GAAc,KAAKnC,YAAL,GAAoB,KAAKmC,MAAzB,GAAkCY,IAAI,CAACC,GAAL,CAAS,KAAKb,MAAd,CAAhD;AACH,KAXiB,CAalB;;;AACA,SAAKF,IAAL,CAAUgB,CAAV,IAAe,KAAKd,MAAL,GAAcW,EAA7B;AACH,GAhGI;AAkGLI,EAAAA,QAlGK,sBAkGM;AACPxD,IAAAA,EAAE,CAACyD,GAAH,CAAO,iDAAP;AACA,SAAKlB,IAAL,CAAUmB,UAAV,CAAqB,KAAKpB,UAA1B;AACH;AArGI,CAAT","sourceRoot":"/","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        jumpHeight: 0,\n        jumpDuration: 0,\n        maxMoveSpeed: 0,\n        accel: 0,\n        jumpAudio: {\n            default: null,\n            type: cc.AudioClip,\n            displayName:\"跳跃声音\"\n        },\n    },\n\n    setJumpAction: function () {\n        // 跳跃上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n\n        var callback = cc.callFunc(this.playJumpSound,this);\n        // 不断重复\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown,callback));\n    },\n\n    playJumpSound(){\n        cc.audioEngine.playEffect(this.jumpAudio,false);\n    },\n\n    onKeyDown(event) {\n        // set a flag when key pressed\n        switch (event.keyCode) {\n            case cc.macro.KEY.a:\n                this.accLeft = true;\n                break;\n            case cc.macro.KEY.d:\n                this.accRight = true;\n                break;\n        }\n    },\n\n    onKeyUp(event) {\n        // unset a flag when key released\n        switch (event.keyCode) {\n            case cc.macro.KEY.a:\n                this.accLeft = false;\n                break;\n            case cc.macro.KEY.d:\n                this.accRight = false;\n                break;\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        // 初始化跳跃动作\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n\n        // 初始化键盘输入监听\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    },\n\n    onDestroy() {\n        // 取消键盘输入监听\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    },\n\n    start() {\n\n    },\n    update: function (dt) {\n        // 根据当前加速度方向每帧更新速度\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // 限制主角的速度不能超过最大值\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n    },\n\n    gameOver() {\n        cc.log(\"=============== Player.gameOver ===============\");\n        this.node.stopAction(this.jumpAction);\n    }\n});\n"]}